{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d58bdd6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "13911882",
   "metadata": {},
   "outputs": [],
   "source": [
    "# matplotlib를 이용하여 다양한 시각화 함수를 제공하는 라이브러리 seaborn\n",
    "import seaborn as snsb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "299a8637",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5105</th>\n",
       "      <td>18234</td>\n",
       "      <td>Female</td>\n",
       "      <td>80.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>83.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5106</th>\n",
       "      <td>44873</td>\n",
       "      <td>Female</td>\n",
       "      <td>81.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>125.20</td>\n",
       "      <td>40.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5107</th>\n",
       "      <td>19723</td>\n",
       "      <td>Female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>82.99</td>\n",
       "      <td>30.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5108</th>\n",
       "      <td>37544</td>\n",
       "      <td>Male</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>166.29</td>\n",
       "      <td>25.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5109</th>\n",
       "      <td>44679</td>\n",
       "      <td>Female</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>85.28</td>\n",
       "      <td>26.2</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "5105  18234  Female  80.0             1              0          Yes   \n",
       "5106  44873  Female  81.0             0              0          Yes   \n",
       "5107  19723  Female  35.0             0              0          Yes   \n",
       "5108  37544    Male  51.0             0              0          Yes   \n",
       "5109  44679  Female  44.0             0              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "5105        Private          Urban              83.75   NaN     never smoked   \n",
       "5106  Self-employed          Urban             125.20  40.0     never smoked   \n",
       "5107  Self-employed          Rural              82.99  30.6     never smoked   \n",
       "5108        Private          Rural             166.29  25.6  formerly smoked   \n",
       "5109       Govt_job          Urban              85.28  26.2          Unknown   \n",
       "\n",
       "      stroke  \n",
       "5105       0  \n",
       "5106       0  \n",
       "5107       0  \n",
       "5108       0  \n",
       "5109       0  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"./data/stroke.csv\")\n",
    "df.head(df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "43e52201",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_raw.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "08b88666",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "avg_gluciose    False\n",
       "bmi              True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ef2ebbc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>301.0</td>\n",
       "      <td>106.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>184.0</td>\n",
       "      <td>114.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>409.0</td>\n",
       "      <td>604.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>377.5</td>\n",
       "      <td>110.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>79.0</td>\n",
       "      <td>-144.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi\n",
       "0         215.5  180.0\n",
       "1         262.0  166.0\n",
       "2         220.0  180.0\n",
       "3         394.0  172.0\n",
       "4         211.0  570.0\n",
       "5         301.0  106.0\n",
       "6         184.0  114.0\n",
       "7         409.0  604.0\n",
       "8         377.5  110.0\n",
       "9          79.0 -144.0"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_samples = 10000\n",
    "avg_gluciose = 150 *np.random.randn(n_samples).round(2) + 220\n",
    "bmi = 200*np.random.randn(n_samples).round(2) + 270\n",
    "\n",
    "df_raw = pd.DataFrame({'avg_gluciose': avg_gluciose,\n",
    "                        'bmi':bmi})\n",
    "df_raw[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "181c2edd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 참고: 메모리 관리를 해주어야 한다. 컴퓨터 메모리구조: 링크드리스트\n",
    "# 원본 보관\n",
    "df = df_raw.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a0d96ce6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='avg_gluciose', ylabel='Count'>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 262,
       "width": 388
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 데이터 분포 확인(확률 분포 근사 그래프 그리기)\n",
    "# sns.histplot(df.height.values)\n",
    "# sns.displot(df.height.values) \n",
    "#sns.distplot(df.height.values)\n",
    "sns.histplot(df.avg_gluciose)\n",
    "sns.histplot(df.bmi)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c76866d0",
   "metadata": {},
   "source": [
    "### 결측치 처리 실습\n",
    "\n",
    "- 결측치 확인: np.isnull() 사용\n",
    "- 결측치 치환: np.fillna() 사용\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "f0ce4ebf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "      <th>a_mima</th>\n",
       "      <th>b_mima</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451327</td>\n",
       "      <td>0.511855</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.520942</td>\n",
       "      <td>0.555091</td>\n",
       "      <td>0.446015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451327</td>\n",
       "      <td>0.516039</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491107</td>\n",
       "      <td>0.677824</td>\n",
       "      <td>0.449871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487928</td>\n",
       "      <td>0.507671</td>\n",
       "      <td>0.705656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>145.0</td>\n",
       "      <td>266.0</td>\n",
       "      <td>-0.514030</td>\n",
       "      <td>-0.023697</td>\n",
       "      <td>0.446304</td>\n",
       "      <td>0.510283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>227.5</td>\n",
       "      <td>86.0</td>\n",
       "      <td>0.033415</td>\n",
       "      <td>-0.918738</td>\n",
       "      <td>0.523013</td>\n",
       "      <td>0.394602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>293.5</td>\n",
       "      <td>252.0</td>\n",
       "      <td>0.471371</td>\n",
       "      <td>-0.093311</td>\n",
       "      <td>0.584379</td>\n",
       "      <td>0.501285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>161.5</td>\n",
       "      <td>558.0</td>\n",
       "      <td>-0.404541</td>\n",
       "      <td>1.428259</td>\n",
       "      <td>0.461646</td>\n",
       "      <td>0.697943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>490.0</td>\n",
       "      <td>414.0</td>\n",
       "      <td>1.775286</td>\n",
       "      <td>0.712226</td>\n",
       "      <td>0.767085</td>\n",
       "      <td>0.605398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      avg_gluciose    bmi      a_sc      b_sc    a_mima    b_mima\n",
       "0            215.5  180.0 -0.046213 -0.451327  0.511855  0.455013\n",
       "1            262.0  166.0  0.262347 -0.520942  0.555091  0.446015\n",
       "2            220.0  180.0 -0.016353 -0.451327  0.516039  0.455013\n",
       "3            394.0  172.0  1.138259 -0.491107  0.677824  0.449871\n",
       "4            211.0  570.0 -0.076074  1.487928  0.507671  0.705656\n",
       "...            ...    ...       ...       ...       ...       ...\n",
       "9995         145.0  266.0 -0.514030 -0.023697  0.446304  0.510283\n",
       "9996         227.5   86.0  0.033415 -0.918738  0.523013  0.394602\n",
       "9997         293.5  252.0  0.471371 -0.093311  0.584379  0.501285\n",
       "9998         161.5  558.0 -0.404541  1.428259  0.461646  0.697943\n",
       "9999         490.0  414.0  1.775286  0.712226  0.767085  0.605398\n",
       "\n",
       "[10000 rows x 6 columns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 임의 갑사 하나를 결측치로 변경\n",
    "df['bmi'][5] =np.nan\n",
    "df[:10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "8f4ffc6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "avg_gluciose    0\n",
       "bmi             1\n",
       "a_sc            0\n",
       "b_sc            0\n",
       "a_mima          0\n",
       "b_mima          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 컬럼별 결측치 갯수 보기\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "0d554c4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 6)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "      <th>a_mima</th>\n",
       "      <th>b_mima</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.511855</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.521015</td>\n",
       "      <td>0.555091</td>\n",
       "      <td>0.446015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.516039</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491181</td>\n",
       "      <td>0.677824</td>\n",
       "      <td>0.449871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487822</td>\n",
       "      <td>0.507671</td>\n",
       "      <td>0.705656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi      a_sc      b_sc    a_mima    b_mima\n",
       "0         215.5  180.0 -0.046213 -0.451402  0.511855  0.455013\n",
       "1         262.0  166.0  0.262347 -0.521015  0.555091  0.446015\n",
       "2         220.0  180.0 -0.016353 -0.451402  0.516039  0.455013\n",
       "3         394.0  172.0  1.138259 -0.491181  0.677824  0.449871\n",
       "4         211.0  570.0 -0.076074  1.487822  0.507671  0.705656"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치를 다른 값으로 대체하기\n",
    "# 키와 몸무게는 평균치로 대체하는 것이 일반적\n",
    "\n",
    "df3 = df.fillna(df['bmi'].mean())\n",
    "print(df3.shape)\n",
    "df3[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "6b460cc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "      <th>a_mima</th>\n",
       "      <th>b_mima</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.511855</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.521015</td>\n",
       "      <td>0.555091</td>\n",
       "      <td>0.446015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.516039</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491181</td>\n",
       "      <td>0.677824</td>\n",
       "      <td>0.449871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487822</td>\n",
       "      <td>0.507671</td>\n",
       "      <td>0.705656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi      a_sc      b_sc    a_mima    b_mima\n",
       "0         215.5  180.0 -0.046213 -0.451402  0.511855  0.455013\n",
       "1         262.0  166.0  0.262347 -0.521015  0.555091  0.446015\n",
       "2         220.0  180.0 -0.016353 -0.451402  0.516039  0.455013\n",
       "3         394.0  172.0  1.138259 -0.491181  0.677824  0.449871\n",
       "4         211.0  570.0 -0.076074  1.487822  0.507671  0.705656"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치 0으로 대체하는 경우\n",
    "# 키나 몸무게는 함부로 0으로 대체하면 안됨(키나 몸무게가 0일 상황이 없음)\n",
    "df.fillna(0)[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "98dc1101",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "      <th>a_mima</th>\n",
       "      <th>b_mima</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.511855</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.521015</td>\n",
       "      <td>0.555091</td>\n",
       "      <td>0.446015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451402</td>\n",
       "      <td>0.516039</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491181</td>\n",
       "      <td>0.677824</td>\n",
       "      <td>0.449871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487822</td>\n",
       "      <td>0.507671</td>\n",
       "      <td>0.705656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi      a_sc      b_sc    a_mima    b_mima\n",
       "0         215.5  180.0 -0.046213 -0.451402  0.511855  0.455013\n",
       "1         262.0  166.0  0.262347 -0.521015  0.555091  0.446015\n",
       "2         220.0  180.0 -0.016353 -0.451402  0.516039  0.455013\n",
       "3         394.0  172.0  1.138259 -0.491181  0.677824  0.449871\n",
       "4         211.0  570.0 -0.076074  1.487822  0.507671  0.705656"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치를 바로 이전/이후 값으로 대체할 수 있음 예시:날씨\n",
    "# 키나 몸무게 같은 데이터가 아닌 날씨와 관련된 시계열 데이터인 경우 많이 사용\n",
    "# fillna(method= ffill(결측치 이전 데이터) / bbfill(결측치 이후 데이터)\n",
    "df.fillna(method=\"ffill\")[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6290864d",
   "metadata": {},
   "source": [
    "# 스케일링\n",
    "- 여러 변수 값의 범위가 서로 다른 경우 데이터 분석에서 동일한 비중으로 반영하기 위해서는 동일한 범위를 갖도록 변환해야 한다 (예: 과목 성적 100점 만점으로 환산)\n",
    "- 표준 스케일링을 가장 많이 사용한다 (평균이 0, 표준편차가 1이 되도록 변환) \n",
    "    - 표준 스케일링을 했다고 데이터 분포가 정규분포가 되지는 않는다. 데이터 분포의 형태는 그대로 유지하되 평균을 0 표준편차를 1로 환산하는 것 뿐이지 데이터의 shape을 변경시키지는 않으므로 정규분포화라고 표현하면 안됨\n",
    "    - 과목간 편차가 있는경우 데이터가 외곡되므로 평균과 표준편차를 동일하게 환산\n",
    "    - 국어의 평균은 90점에 모여있고 수학은 70점에 모여 있다면 그 두 과목을 그냥 처리하면 외곡됨\n",
    "    - 수학은 편차가 크고 국어는 편차가 없으면 수학이 모든걸 좌우하는데 국어도 똑같은 비중으로 반영하게 하려면 퍼진정도를 맞춰줘야함\n",
    "- 값의 최소치와 최대치가 정해진 경우는 min-max 스케링일도 자주 사용된다 (최소치를 0으로, 최대치를 1로)\n",
    "    - 전압이 0-5 만 나온다면 min-max를 사용하기도 함\n",
    "\n",
    "## 표준 스케일링\n",
    "\n",
    "\n",
    "<img src=\"https://raw.githubusercontent.com/data-labs/image/main/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-01-05%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%208.52.14.png?raw=1\" width=140  align='left'>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "27bc651d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 키, 몸무게 데이터를 각각 표준 스케일링한 후 컬럼에 추가\n",
    "# fit_transform () : 표준 스케일링을 구성해주는 함수\n",
    "# 데이터프레임의 키와 몸무게 두 컬럼을 가지고 평균과 표준편차를 구하고 모든 데이터마다 평균을 빼서 표준편차로 나눠주는 작업을 수행\n",
    "df = df_raw.copy() # 백업 데이터 사용 (결측치 없는)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "4f32ff48",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler #표준 스케일링"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "cc8c2c1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "scale = StandardScaler() # 생성자 호출 인스턴스 생성"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "a611f8dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.520942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487928</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi      a_sc      b_sc\n",
       "0         215.5  180.0 -0.046213 -0.451327\n",
       "1         262.0  166.0  0.262347 -0.520942\n",
       "2         220.0  180.0 -0.016353 -0.451327\n",
       "3         394.0  172.0  1.138259 -0.491107\n",
       "4         211.0  570.0 -0.076074  1.487928"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['a_sc','b_sc']] = scale.fit_transform(df[['avg_gluciose','bmi']])\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1acbcbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#scale 평균, scale 의 표준편차를 구해보자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "edd770bf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.105427357601002e-18"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['a_sc'].mean()\n",
    "#df['a_sc'].std()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "273189d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.574607194105738e-17"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['b_sc'].mean()\n",
    "#df['b_sc'].std()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28fc7f53",
   "metadata": {},
   "source": [
    "### 데이터 분포 보기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "bf7c0884",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 404
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 원래 키, 몸무게의 데이터의 확률 분포 보기 (kernel density estimate 함수 사용)\n",
    "df[[\"avg_gluciose\",\"bmi\"]].plot.kde() #히스토그램에 가장 근접한 확률분포함수를 이용한 그래프"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "5ef7c026",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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NvUuizqyqCObepdJPVk0kkGDy6SRDBrJoNmyaA1k0pqWTVNaLofSh3AkYzAt6fnkZqVTPCCL4gFZlAzI4pT8TIYX5jCqKJeRg3LU7UikHxqYm8nA3MxOzsw85sg5R3VtE3sON7Cm+gg1e7fSsH8HTUeqaDm6H+qrSW84RD5HyaOBXBrIswZyaWSA1XvHNJJlzX3zwkQSVLIlDyfT1sbX24EcPblP1M/pqm9ZqEViVjfq7L2C4XDjE52f67LJtIvyDtdv29/Wbenk10c+1XV1PdZFSJ1fb13F36HcuijveL0dV491WrXrIiKzLmb+6G48oSuOP32C6zs51e14urjGBTIJpucSzMwlmJ5La3oeLi0T7Nh3LADkAQUBIys9jcz0AFnhh3ecmR4gTQOVRSQOzIzBA7IYPCCL6SMK4dRRx10TDDoO1DZxtLGFhuZW6ptbqW5uZU9LEBwEnYPWZgIt9VhzLWktdViwCVpbsGAzFmwhEGwmEAwdh78SRHw1iOjGemyX0C72k2doasrKSg8wfUScuy0VjY/v/WMo2ZKHtl/3C7s4X9DhuljeJ1Z1J5bsAph2bVxuPTb0EBERSQaBgDEkP0srWoucQLJNgrwhtJ3UxfmJoW1XYxl6c58un2Nm6Xjfk1uArSepW0REREQkKSVb8vB6aLvAOvS5CE2xOh+oB96Ow31eC20v6+R+5wG5wOKkmmlJRERERKQbkip5cM5tAV4GyoDbO5y+H69L9c8i1mbIMLMpodWke3yfkN8A+4EPmtmctkIzywb+K3T43R6/OBERERGRBJdsYx4AbgMWAw+b2cV406KeBVyI183oixHXjgid346XKPT0PjjnjpjZx/GSiEVm9hRQDVyNN43rb4CnY/YqRUREREQSTFK1PEC41WAO8Djel/3PAuOBh4F5zrkD8bqPc+5Z4Hy8ReGuBz4NNAN3Ax90ybRct4iIiIhINyVjywPOuZ3AR6O4rpyu56+M+j4dnvMWcEV3niMiIiIikgqSruVBRERERET8oeRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiouRBRERERESiYs45v2OQEDM7kJOTUzR16lS/QxERERGRFLZu3Trq6+urnXODu/M8JQ8JxMy2AQVAeZyq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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 391
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 표준 스케일링된 데이터의 확률 분포 보기 - 정규분포로 생성했다\n",
    "df[[\"a_sc\",\"b_sc\"]].plot.kde() #데이터의 평균이 1이고 표준편차가 0인 형태로 변환\n",
    "# 키와 몸무게를 동일한 비중으로 사용하려면 값의 편차가 있으면 안된다"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37c9b7ef",
   "metadata": {},
   "source": [
    "## Min-Max 스케일링\n",
    "- 데이터의 최소값이 0, 최대값이 1이 되도록 조정\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "3ad01172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>avg_gluciose</th>\n",
       "      <th>bmi</th>\n",
       "      <th>a_sc</th>\n",
       "      <th>b_sc</th>\n",
       "      <th>a_mima</th>\n",
       "      <th>b_mima</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>215.5</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.046213</td>\n",
       "      <td>-0.451327</td>\n",
       "      <td>0.511855</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>262.0</td>\n",
       "      <td>166.0</td>\n",
       "      <td>0.262347</td>\n",
       "      <td>-0.520942</td>\n",
       "      <td>0.555091</td>\n",
       "      <td>0.446015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>220.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>-0.016353</td>\n",
       "      <td>-0.451327</td>\n",
       "      <td>0.516039</td>\n",
       "      <td>0.455013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>394.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>1.138259</td>\n",
       "      <td>-0.491107</td>\n",
       "      <td>0.677824</td>\n",
       "      <td>0.449871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>211.0</td>\n",
       "      <td>570.0</td>\n",
       "      <td>-0.076074</td>\n",
       "      <td>1.487928</td>\n",
       "      <td>0.507671</td>\n",
       "      <td>0.705656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   avg_gluciose    bmi      a_sc      b_sc    a_mima    b_mima\n",
       "0         215.5  180.0 -0.046213 -0.451327  0.511855  0.455013\n",
       "1         262.0  166.0  0.262347 -0.520942  0.555091  0.446015\n",
       "2         220.0  180.0 -0.016353 -0.451327  0.516039  0.455013\n",
       "3         394.0  172.0  1.138259 -0.491107  0.677824  0.449871\n",
       "4         211.0  570.0 -0.076074  1.487928  0.507671  0.705656"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "minmax = MinMaxScaler()\n",
    "df[['a_mima','b_mima']]=minmax.fit_transform(df[['avg_gluciose','bmi']]) #0과 1사이의 값으로 치환\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "52596de5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 385
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# min-max 스케일링 된 데이터의 확률 분포\n",
    "df[[\"a_mima\",\"b_mima\"]].plot.kde()\n",
    "\n",
    "# 0보다 적은 값이나 1보다 큰 값이 있어서 꼬리가 표현되는건 아님"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b322055e",
   "metadata": {},
   "source": [
    "- 위의 결과를 보면 표준 스케일링과 min-mzx 스케일링이 별 차이가 없다\n",
    "- 이상치가 있을 때는 두 스케일링 결과 값의 변화 정도가 크게 달라짐"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "75ce0cb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "avg_gluciose_1 =  avg_gluciose.copy()\n",
    "avg_gluciose_1[0] = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "e1a96b7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 이상치가 포함된 키 데이터 생성: height_1\n",
    "# 첫번째 샘플의 키 값을 임의로 2m로 변경 (200)\n",
    "bmi_1 = bmi.copy()\n",
    "bmi_1[0] = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "57f40914",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 383
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[[\"avg_gluciose\", \"bmi\"]].boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "593b59a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 248,
       "width": 370
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[[\"a_sc\", \"b_sc\"]].boxplot() # 키가 2m 인 사람은  7 시그마 밖에 존재"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4010417",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c21c2af2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc3c7286",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7f4c3ae",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a61f2b2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0254d30",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a931bf6c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20c7371a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0301a7e7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 결측치\n",
    "\n",
    "- NaN : 값이 있어야 하는데 없는 결측 대체, 추정, 예측\n",
    "- None : 값이 없는게 값인 결측(ex.직업-없음) 새로운 값으로 정의하는 방식으로 처리\n",
    "- 결측치 처리 방법은 매우 간단\n",
    "    - 상황(도메인)에 따라 다른 처리방법 선택이 매우 중요"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 용어\n",
    "- 결측레코드 : 결측치를 포함하는 레코드\n",
    "- 결측치 비율 : 결측 레코드 수 / 전체 레코드 개수"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 결측치 삭제  \n",
    "\n",
    "- 행단위 결측 삭제 : 매우 간단한 방법 but 조건을 만족하는 경우에만 수행할 수 있음\n",
    "    - 결측이 없는 레코드가 모델 학습하는데 충분해야 함 - 학습 샘플 개수에 따른 성는의 수렴여부로 확인 결정\n",
    "    - 결측이 새로 들어올 데이터에는 없어야 한다 - 도메인 지식 기반의 판단이 필요함\n",
    "    \n",
    "- 열단위 결측 삭제 : 매우 간단한 방법 but 조건을 만족하는 경우에만 수행할 수 있음\n",
    "    - 어느 특정 변수에만 결측이 많이 포함되어 있음\n",
    "    - 해당 변수들이 크게 중요하지 않음(도메인 지식)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0        Private          Urban             228.69  36.6  formerly smoked   \n",
       "1  Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2        Private          Rural             105.92  32.5     never smoked   \n",
       "3        Private          Urban             171.23  34.4           smokes   \n",
       "4  Self-employed          Rural             174.12  24.0     never smoked   \n",
       "\n",
       "   stroke  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 데이터 로드\n",
    "df = pd.read_csv(\"./data/stroke.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5110, 12)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 특징과 레이블 분리\n",
    "X = df.drop('stroke',axis=1) # 열삭제\n",
    "Y = df['stroke']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 학습 데이터와 평가 데이터 분할\n",
    "from sklearn.model_selection import train_test_split\n",
    "Train_X, Test_X, Train_Y, Test_Y = train_test_split(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 학습데이터만의 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                     0\n",
       "gender                 0\n",
       "age                    0\n",
       "hypertension           0\n",
       "heart_disease          0\n",
       "ever_married           0\n",
       "work_type              0\n",
       "Residence_type         0\n",
       "avg_glucose_level      0\n",
       "bmi                  150\n",
       "smoking_status         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측치 확인 - 컬럼별 결측치 개수 확인\n",
    "Train_X.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0.000000\n",
       "gender               0.000000\n",
       "age                  0.000000\n",
       "hypertension         0.000000\n",
       "heart_disease        0.000000\n",
       "ever_married         0.000000\n",
       "work_type            0.000000\n",
       "Residence_type       0.000000\n",
       "avg_glucose_level    0.000000\n",
       "bmi                  0.039144\n",
       "smoking_status       0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 열별 결측치 비율 확인\n",
    "Train_X.isnull().sum(axis=0)/len(Train_X)\n",
    "# 결측이 전체적으로 많은편은 아니지만 4개의 컬럼에 결측이 1회이상 발생 => 열 삭제 불가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-8-5d3d8566aec6>:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  Train_X.dropna(inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# 결측 비율이 높지 않으므로 결측이 포함된 레코드 제거하기로 결정\n",
    "Train_X.dropna(inplace=True)\n",
    "# 주의 새로 들어온 레코드의 결측이 있으면 처리하지 못함을 의미"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3682, 11)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.shape # 레코드 삭제 조건 1 : 삭제 후 충분한 데이터가 있어야 한다(성능 확인 후 판단 가능)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                    0\n",
       "gender                0\n",
       "age                   0\n",
       "hypertension          0\n",
       "heart_disease         0\n",
       "ever_married          0\n",
       "work_type             0\n",
       "Residence_type        0\n",
       "avg_glucose_level     0\n",
       "bmi                  51\n",
       "smoking_status        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 새로수집되었다고 가정한 Test_X 에 결측치가 포함되어 있음 : 레코드 삭제 조건 2를 위배\n",
    "Test_X.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 열 단위 삭제"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9046</td>\n",
       "      <td>Male</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>228.69</td>\n",
       "      <td>36.6</td>\n",
       "      <td>formerly smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>51676</td>\n",
       "      <td>Female</td>\n",
       "      <td>61.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>202.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31112</td>\n",
       "      <td>Male</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>105.92</td>\n",
       "      <td>32.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60182</td>\n",
       "      <td>Female</td>\n",
       "      <td>49.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>171.23</td>\n",
       "      <td>34.4</td>\n",
       "      <td>smokes</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1665</td>\n",
       "      <td>Female</td>\n",
       "      <td>79.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>174.12</td>\n",
       "      <td>24.0</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  gender   age  hypertension  heart_disease ever_married  \\\n",
       "0   9046    Male  67.0             0              1          Yes   \n",
       "1  51676  Female  61.0             0              0          Yes   \n",
       "2  31112    Male  80.0             0              1          Yes   \n",
       "3  60182  Female  49.0             0              0          Yes   \n",
       "4   1665  Female  79.0             1              0          Yes   \n",
       "\n",
       "       work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n",
       "0        Private          Urban             228.69  36.6  formerly smoked   \n",
       "1  Self-employed          Rural             202.21   NaN     never smoked   \n",
       "2        Private          Rural             105.92  32.5     never smoked   \n",
       "3        Private          Urban             171.23  34.4           smokes   \n",
       "4  Self-employed          Rural             174.12  24.0     never smoked   \n",
       "\n",
       "   stroke  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"data/stroke.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 특징과 라벨 분리\n",
    "X = df.drop('stroke', axis = 1)\n",
    "Y = df['stroke']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 학습 데이터와 평가 데이터 분할\n",
    "from sklearn.model_selection import train_test_split\n",
    "Train_X, Test_X, Train_Y, Test_Y = train_test_split(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>70970</td>\n",
       "      <td>Female</td>\n",
       "      <td>17.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>82.18</td>\n",
       "      <td>23.4</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1093</th>\n",
       "      <td>66772</td>\n",
       "      <td>Female</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>55.86</td>\n",
       "      <td>16.0</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>49916</td>\n",
       "      <td>Male</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>110.99</td>\n",
       "      <td>29.8</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1877</th>\n",
       "      <td>14599</td>\n",
       "      <td>Female</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>77.87</td>\n",
       "      <td>18.3</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1161</th>\n",
       "      <td>47414</td>\n",
       "      <td>Female</td>\n",
       "      <td>71.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>116.76</td>\n",
       "      <td>32.9</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender    age  hypertension  heart_disease ever_married  \\\n",
       "288   70970  Female  17.00             0              0           No   \n",
       "1093  66772  Female   0.32             0              0           No   \n",
       "362   49916    Male  76.00             0              0          Yes   \n",
       "1877  14599  Female   3.00             0              0           No   \n",
       "1161  47414  Female  71.00             1              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \n",
       "288   Self-employed          Urban              82.18  23.4          Unknown  \n",
       "1093       children          Rural              55.86  16.0          Unknown  \n",
       "362         Private          Rural             110.99  29.8  formerly smoked  \n",
       "1877       children          Rural              77.87  18.3          Unknown  \n",
       "1161        Private          Urban             116.76  32.9  formerly smoked  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.head() # COMFORT 컬럼에 ? 값이 있고 결측이라고 전달 받음 - 도메인 지식에 기반해야 함"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0.000000\n",
       "gender               0.000000\n",
       "age                  0.000000\n",
       "hypertension         0.000000\n",
       "heart_disease        0.000000\n",
       "ever_married         0.000000\n",
       "work_type            0.000000\n",
       "Residence_type       0.000000\n",
       "avg_glucose_level    0.000000\n",
       "bmi                  0.037056\n",
       "smoking_status       0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 결측 비율을 확인 - 결측이 ?로 표시되어 있음\n",
    "import numpy as np\n",
    "Train_X.replace('?',np.nan).isnull().sum() /len(Train_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>70970</td>\n",
       "      <td>Female</td>\n",
       "      <td>17.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>82.18</td>\n",
       "      <td>23.4</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1093</th>\n",
       "      <td>66772</td>\n",
       "      <td>Female</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>55.86</td>\n",
       "      <td>16.0</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>49916</td>\n",
       "      <td>Male</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>110.99</td>\n",
       "      <td>29.8</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1877</th>\n",
       "      <td>14599</td>\n",
       "      <td>Female</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>77.87</td>\n",
       "      <td>18.3</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1161</th>\n",
       "      <td>47414</td>\n",
       "      <td>Female</td>\n",
       "      <td>71.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>116.76</td>\n",
       "      <td>32.9</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3963</th>\n",
       "      <td>49400</td>\n",
       "      <td>Male</td>\n",
       "      <td>75.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>97.22</td>\n",
       "      <td>28.4</td>\n",
       "      <td>never smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3254</th>\n",
       "      <td>27034</td>\n",
       "      <td>Female</td>\n",
       "      <td>65.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>82.72</td>\n",
       "      <td>29.8</td>\n",
       "      <td>smokes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>325</th>\n",
       "      <td>4480</td>\n",
       "      <td>Male</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>234.58</td>\n",
       "      <td>34.3</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>42441</td>\n",
       "      <td>Male</td>\n",
       "      <td>7.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Urban</td>\n",
       "      <td>152.81</td>\n",
       "      <td>17.7</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3565</th>\n",
       "      <td>68302</td>\n",
       "      <td>Female</td>\n",
       "      <td>40.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>65.77</td>\n",
       "      <td>31.2</td>\n",
       "      <td>never smoked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3832 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender    age  hypertension  heart_disease ever_married  \\\n",
       "288   70970  Female  17.00             0              0           No   \n",
       "1093  66772  Female   0.32             0              0           No   \n",
       "362   49916    Male  76.00             0              0          Yes   \n",
       "1877  14599  Female   3.00             0              0           No   \n",
       "1161  47414  Female  71.00             1              0          Yes   \n",
       "...     ...     ...    ...           ...            ...          ...   \n",
       "3963  49400    Male  75.00             0              0          Yes   \n",
       "3254  27034  Female  65.00             0              0          Yes   \n",
       "325    4480    Male  76.00             0              0          Yes   \n",
       "780   42441    Male   7.00             0              0           No   \n",
       "3565  68302  Female  40.00             0              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \n",
       "288   Self-employed          Urban              82.18  23.4          Unknown  \n",
       "1093       children          Rural              55.86  16.0          Unknown  \n",
       "362         Private          Rural             110.99  29.8  formerly smoked  \n",
       "1877       children          Rural              77.87  18.3          Unknown  \n",
       "1161        Private          Urban             116.76  32.9  formerly smoked  \n",
       "...             ...            ...                ...   ...              ...  \n",
       "3963        Private          Rural              97.22  28.4     never smoked  \n",
       "3254       Govt_job          Urban              82.72  29.8           smokes  \n",
       "325         Private          Rural             234.58  34.3  formerly smoked  \n",
       "780        children          Urban             152.81  17.7          Unknown  \n",
       "3565        Private          Urban              65.77  31.2     never smoked  \n",
       "\n",
       "[3832 rows x 11 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.replace('bmi',np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\JIGUNJANG\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:4308: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  return super().drop(\n"
     ]
    }
   ],
   "source": [
    "Train_X.drop('bmi',axis=1, inplace=True)\n",
    "\n",
    "# 새로 수집되는 데이터에도 결측 발생을 용인(COMFORT를 아예 수집하지 않게 처리?-도메인 기반해서 결정)\n",
    "# 새로 수집된 데이터에 있는 결측 컬럼도 제거해서 서비스에 사용해야 함\n",
    "Test_X.drop('bmi', axis=1, inplace=True) # Test_X에는 COMFORT가 결측이 없을 수도 있으므로 drop을 이용해 삭제"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0\n",
       "gender               0\n",
       "age                  0\n",
       "hypertension         0\n",
       "heart_disease        0\n",
       "ever_married         0\n",
       "work_type            0\n",
       "Residence_type       0\n",
       "avg_glucose_level    0\n",
       "smoking_status       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train_X.isnull().sum(axis = 0)\n",
    "Test_X.isnull().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>smoking_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>288</th>\n",
       "      <td>70970</td>\n",
       "      <td>Female</td>\n",
       "      <td>17.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>82.18</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1093</th>\n",
       "      <td>66772</td>\n",
       "      <td>Female</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>55.86</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>49916</td>\n",
       "      <td>Male</td>\n",
       "      <td>76.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>110.99</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1877</th>\n",
       "      <td>14599</td>\n",
       "      <td>Female</td>\n",
       "      <td>3.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>77.87</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1161</th>\n",
       "      <td>47414</td>\n",
       "      <td>Female</td>\n",
       "      <td>71.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>116.76</td>\n",
       "      <td>formerly smoked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  gender    age  hypertension  heart_disease ever_married  \\\n",
       "288   70970  Female  17.00             0              0           No   \n",
       "1093  66772  Female   0.32             0              0           No   \n",
       "362   49916    Male  76.00             0              0          Yes   \n",
       "1877  14599  Female   3.00             0              0           No   \n",
       "1161  47414  Female  71.00             1              0          Yes   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   smoking_status  \n",
       "288   Self-employed          Urban              82.18          Unknown  \n",
       "1093       children          Rural              55.86          Unknown  \n",
       "362         Private          Rural             110.99  formerly smoked  \n",
       "1877       children          Rural              77.87          Unknown  \n",
       "1161        Private          Urban             116.76  formerly smoked  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0.097747\n",
       "age                  0.178452\n",
       "hypertension         0.156345\n",
       "heart_disease        0.152495\n",
       "avg_glucose_level    0.156123\n",
       "dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 관련성 확인 - 관련성이 없음 : 대표값 대체 활용 가능\n",
    "# 주의 : 모든 변수가 연속형이므로 가능한 확인\n",
    "\n",
    "Train_X.corr().sum()/(len(Train_X.columns) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop('stroke', axis = 1)\n",
    "Y = df['stroke']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 학습 데이터와 평가 데이터로 분리\n",
    "from sklearn.model_selection import train_test_split\n",
    "Train_X, Test_X, Train_y, Test_y = train_test_split(X, Y, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3832, 11)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    2237\n",
       "Male      1594\n",
       "Other        1\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "78.00    85\n",
       "52.00    67\n",
       "53.00    67\n",
       "54.00    66\n",
       "51.00    66\n",
       "         ..\n",
       "1.40      2\n",
       "0.40      2\n",
       "0.64      2\n",
       "0.16      1\n",
       "0.08      1\n",
       "Name: age, Length: 104, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['age'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3457\n",
       "1     375\n",
       "Name: hypertension, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['hypertension'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3631\n",
       "1     201\n",
       "Name: heart_disease, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['heart_disease'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Yes    2518\n",
       "No     1314\n",
       "Name: ever_married, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['ever_married'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Private          2189\n",
       "Self-employed     619\n",
       "children          520\n",
       "Govt_job          489\n",
       "Never_worked       15\n",
       "Name: work_type, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['work_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Urban    1933\n",
       "Rural    1899\n",
       "Name: Residence_type, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['Residence_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93.88     6\n",
       "83.16     5\n",
       "90.42     4\n",
       "100.54    4\n",
       "84.40     4\n",
       "         ..\n",
       "142.64    1\n",
       "239.28    1\n",
       "79.13     1\n",
       "92.37     1\n",
       "223.58    1\n",
       "Name: avg_glucose_level, Length: 3137, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['avg_glucose_level'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "never smoked       1417\n",
       "Unknown            1157\n",
       "formerly smoked     658\n",
       "smokes              600\n",
       "Name: smoking_status, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['smoking_status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26.7    33\n",
       "28.7    31\n",
       "26.1    30\n",
       "25.1    30\n",
       "27.3    29\n",
       "        ..\n",
       "50.9     1\n",
       "13.8     1\n",
       "53.4     1\n",
       "51.8     1\n",
       "54.0     1\n",
       "Name: bmi, Length: 398, dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X['bmi'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                   0.091796\n",
       "age                  0.193168\n",
       "hypertension         0.158520\n",
       "heart_disease        0.141451\n",
       "avg_glucose_level    0.160690\n",
       "bmi                  0.157047\n",
       "dtype: float64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Train_X.corr().sum() / len(Train_X.columns)   #SUM:0.902672"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "Train_X_cate = Train_X[['bmi','gender','age','hypertension','heart_disease','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status']]\n",
    "Train_X_cont = Train_X.drop('hypertension', axis=1)\n",
    "\n",
    "Test_X_cate = Test_X[['bmi','gender','age','hypertension','heart_disease','ever_married','work_type','Residence_type','avg_glucose_level','bmi','smoking_status']]\n",
    "Test_X_cont = Test_X.drop('hypertension', axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 대표값으 ㄹ활용한 결측치 대쳋\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# 각 데이터에 상용할 인스턴스 생성\n",
    "SI_mode = SimpleImputer(strategy = 'most_frequent') # 대표값 최빈값\n",
    "SI_mean = SimpleImputer(strategy = 'mean') # 대표값 평균"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Cannot use mean strategy with non-numeric data:\ncould not convert string to float: 'Male'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-62-200f71ecbb1a>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# 학습\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mSI_mode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTrain_X_cate\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mSI_mean\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTrain_X_cont\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\impute\\_base.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y)\u001b[0m\n\u001b[0;32m    286\u001b[0m         \u001b[0mself\u001b[0m \u001b[1;33m:\u001b[0m \u001b[0mSimpleImputer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    287\u001b[0m         \"\"\"\n\u001b[1;32m--> 288\u001b[1;33m         \u001b[0mX\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_validate_input\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0min_fit\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    289\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    290\u001b[0m         \u001b[1;31m# default fill_value is 0 for numerical input and \"missing_value\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\impute\\_base.py\u001b[0m in \u001b[0;36m_validate_input\u001b[1;34m(self, X, in_fit)\u001b[0m\n\u001b[0;32m    258\u001b[0m                 new_ve = ValueError(\"Cannot use {} strategy with non-numeric \"\n\u001b[0;32m    259\u001b[0m                                     \"data:\\n{}\".format(self.strategy, ve))\n\u001b[1;32m--> 260\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mnew_ve\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    261\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    262\u001b[0m                 \u001b[1;32mraise\u001b[0m \u001b[0mve\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: Cannot use mean strategy with non-numeric data:\ncould not convert string to float: 'Male'"
     ]
    }
   ],
   "source": [
    "# 학습\n",
    "SI_mode.fit(Train_X_cate)\n",
    "SI_mean.fit(Train_X_cont)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Datascience\\전공 사이언스\\전처리\\변경파일\n"
     ]
    }
   ],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
